{
  "openapi": "3.0.3",
  "info": {
    "title": "@weka-api",
    "version": "3.11.0"
  },
  "servers": [
    {
      "url": "/api/v2"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "requestBodies": {},
    "schemas": {
      "fileSystem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "FSId<2>"
          },
          "auto_max_files": {
            "type": "boolean",
            "example": false
          },
          "used_ssd_data": {
            "type": "number",
            "example": 0
          },
          "name": {
            "type": "string",
            "example": "fs1"
          },
          "uid": {
            "type": "string",
            "example": "245"
          },
          "max_files": {
            "type": "number",
            "example": 1
          },
          "is_removing": {
            "type": "boolean",
            "example": false
          },
          "group_id": {
            "type": "string",
            "example": "FSGroupId<0>"
          },
          "is_creating": {
            "type": "boolean",
            "example": true
          },
          "free_total": {
            "type": "number",
            "example": 1073737728
          },
          "is_encrypted": {
            "type": "boolean",
            "example": true
          },
          "metadata_budget": {
            "type": "number",
            "example": 4202496
          },
          "used_total_data": {
            "type": "number",
            "example": 0
          },
          "used_total": {
            "type": "number",
            "example": 4096
          },
          "ssd_budget": {
            "type": "number",
            "example": 1073741824
          },
          "is_ready": {
            "type": "boolean",
            "example": false
          },
          "group_name": {
            "type": "string",
            "example": "default"
          },
          "available_total": {
            "type": "number",
            "example": 1073741824
          },
          "status": {
            "type": "string",
            "example": "CREATING"
          },
          "used_ssd_metadata": {
            "type": "number",
            "example": 4096
          },
          "auth_required": {
            "type": "boolean",
            "example": true
          },
          "available_ssd_metadata": {
            "type": "number",
            "example": 4202496
          },
          "total_budget": {
            "type": "number",
            "example": 1073741824
          },
          "used_ssd": {
            "type": "number",
            "example": 4096
          },
          "object_storages": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uid": {
                  "type": "string",
                  "example": "237"
                },
                "state": {
                  "type": "number",
                  "example": "ACTIVE"
                },
                "obsId": {
                  "type": "number",
                  "example": "ObjectStorageId<0>"
                },
                "mode": {
                  "type": "number",
                  "example": "WRITABLE"
                },
                "name": {
                  "type": "number",
                  "example": "OBS_1"
                }
              }
            }
          },
          "available_ssd": {
            "type": "number",
            "example": 1073741824
          },
          "free_ssd": {
            "type": "number",
            "example": 1073737728
          }
        }
      },
      "alert": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "AdminDefaultPassword"
          },
          "muted": {
            "type": "boolean",
            "example": true
          },
          "fmt": {
            "type": "string",
            "example": "The admin password is still set to factory default, it should to be changed to ensure only authorized users can access the cluster"
          },
          "action": {
            "type": "string",
            "example": "Change the admin user password to using 'weka user passwd' to ensure only authorized users can access the cluster"
          },
          "title": {
            "type": "string",
            "example": "Default Password In Use"
          },
          "params": {
            "type": "object"
          }
        }
      },
      "defaultNet": {
        "type": "object",
        "properties": {
          "range": {
            "type": "string",
            "description": "IP range (format - A.B.C.D-E.F.G.H or A.B.C.D-F.G.H or A.B.C.D-G.H or A.B.C.D-H)"
          },
          "gateway": {
            "type": "string",
            "description": "Default gateway IP"
          },
          "netmask": {
            "type": "number",
            "description": "Subnet mask bits (0..32)"
          }
        }
      }
    },
    "responses": {
      "401": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              }
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/activeDirectory": {
      "put": {
        "tags": [
          "Active directory"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean"
                  },
                  "server_uri": {
                    "type": "string",
                    "description": "LDAP server URI ([ldap://]hostname[:port] or ldaps://hostname[:port])"
                  },
                  "start_tls": {
                    "type": "boolean",
                    "description": "Issue StartTLS after connecting (should not be used with ldaps://)"
                  },
                  "ignore_start_tls_failure": {
                    "type": "boolean",
                    "description": "Ignore start TLS failure"
                  },
                  "server_timeout_secs": {
                    "description": "LDAP connection timeout in seconds",
                    "type": "number"
                  },
                  "domain": {
                    "type": "string",
                    "description": "Domain"
                  },
                  "reader_username": {
                    "description": "Reader username",
                    "type": "string"
                  },
                  "reader_password": {
                    "type": "string",
                    "description": "Reader password"
                  },
                  "user_revocation_attribute": {
                    "type": "string",
                    "description": "User revocation attribute - If provided, updating this attribute in the LDAP server automatically revokes all user tokens"
                  },
                  "role_groups": {
                    "type": "array",
                    "description": "user role can be ClusterAdmin, OrgAdmin, ReadOnly or Regular",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Update active directory",
        "operationId": "updateLdapActiveDirectory",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/alerts": {
      "get": {
        "tags": [
          "Alerts"
        ],
        "summary": "Get all alerts",
        "operationId": "getAlerts",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/alert"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/alerts/types": {
      "get": {
        "tags": [
          "Alerts"
        ],
        "summary": "Get alerts types",
        "operationId": "getAlertsTypes",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/description": {
      "get": {
        "tags": [
          "Alerts"
        ],
        "summary": "Get alerts description",
        "operationId": "getAlertDescription",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/{alert_type}/mute": {
      "put": {
        "tags": [
          "Alerts"
        ],
        "summary": "Mute alerts by type",
        "operationId": "muteAlertByType",
        "parameters": [
          {
            "in": "path",
            "name": "alert_type",
            "description": "Alert type",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "duration": {
                    "type": "number",
                    "default": 604800,
                    "description": "Mute duration in milliseconds"
                  }
                },
                "required": [
                  "duration"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/{alert_type}/unmute": {
      "put": {
        "tags": [
          "Alerts"
        ],
        "summary": "Unmute alerts by type",
        "operationId": "unmuteAlertByType",
        "parameters": [
          {
            "in": "path",
            "name": "alert_type",
            "description": "Alert type",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/wekaHome": {
      "get": {
        "tags": [
          "Weka home"
        ],
        "summary": "Get cloud config",
        "operationId": "getCloud",
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/wekaHome/credentials": {
      "get": {
        "tags": [
          "Weka home"
        ],
        "summary": "Get cloud credentials",
        "operationId": "getCloudCredentials",
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/wekaHome/proxy": {
      "get": {
        "tags": [
          "Weka home"
        ],
        "summary": "Get cloud proxy",
        "operationId": "getCloudProxy",
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "Weka home"
        ],
        "summary": "Set cloud proxy",
        "operationId": "setCloudProxy",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "proxy": {
                    "type": "string",
                    "description": "HTTP proxy used to connect to cloud services"
                  }
                },
                "required": [
                  "proxy"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/wekaHome/uploadRate": {
      "get": {
        "tags": [
          "Weka home"
        ],
        "summary": "Get cloud upload rate",
        "operationId": "getCloudUploadRate",
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "put": {
        "tags": [
          "Weka home"
        ],
        "summary": "Update cloud upload rate",
        "operationId": "updateCloudUploadRate",
        "responses": {
          "200": {
            "description": ""
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "bytes_per_second": {
                    "type": "number",
                    "description": "Maximum uploaded bytes per second"
                  }
                },
                "required": [
                  "bytes_per_second"
                ]
              }
            }
          }
        }
      }
    },
    "/wekaHome/url": {
      "get": {
        "tags": [
          "Weka home"
        ],
        "summary": "Get cloud url",
        "operationId": "getCloudUrl",
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/wekaHome/enable": {
      "post": {
        "tags": [
          "Weka home"
        ],
        "summary": "Enable cloud",
        "operationId": "enableCloud",
        "responses": {
          "200": {
            "description": ""
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cloud_url": {
                    "type": "string",
                    "description": "The base url of the cloud service"
                  },
                  "enable_cloud_stats": {
                    "type": "boolean",
                    "description": "Enable or disable uploading stats to the cloud"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wekaHome/disable": {
      "post": {
        "tags": [
          "Weka home"
        ],
        "summary": "Disable cloud",
        "operationId": "disableCloud",
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/cluster": {
      "put": {
        "tags": [
          "Cluster"
        ],
        "summary": "Update cluster",
        "operationId": "updateCluster",
        "responses": {
          "200": {
            "description": ""
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cluster_name": {
                    "type": "string",
                    "description": "Cluster name"
                  },
                  "data_drives": {
                    "type": "number",
                    "description": "Number of RAID data drives"
                  },
                  "parity_drives": {
                    "type": "number",
                    "description": "Number of RAID protection parity drives"
                  },
                  "scrubber_bytes_per_sec": {
                    "type": "number",
                    "description": "Rate of RAID scrubbing in units per second (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)"
                  },
                  "hotspare_failure_domains": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Cluster"
        ],
        "summary": "Get cluster status",
        "operationId": "getClusterStatus",
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/defaultNet": {
      "get": {
        "tags": [
          "Default network"
        ],
        "summary": "Get default network",
        "operationId": "getDefaultNetwork",
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "Default network"
        ],
        "summary": "Set default network",
        "operationId": "setDefaultNetwork",
        "responses": {
          "200": {
            "description": ""
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/defaultNet"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Default network"
        ],
        "summary": "Update default network",
        "operationId": "updateDefaultNetwork",
        "responses": {
          "200": {
            "description": ""
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/defaultNet"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Default network"
        ],
        "summary": "Reset default network",
        "operationId": "resetDefaultNetwork",
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/drives": {
      "get": {
        "tags": [
          "Drive"
        ],
        "summary": "Get drives list",
        "operationId": "getDrives",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "show_removed",
            "schema": {
              "type": "boolean"
            }
          }
        ]
      },
      "post": {
        "tags": [
          "Drive"
        ],
        "summary": "Provision drives",
        "operationId": "provisionDrives",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "host_uid": {
                    "type": "string",
                    "description": "The host the drive attached to"
                  },
                  "device_path": {
                    "type": "string",
                    "description": "Device path of the drives to add"
                  },
                  "percentage": {
                    "type": "number",
                    "description": "Percentage of the drive to take (between 0-1) default 1"
                  },
                  "force": {
                    "type": "boolean",
                    "description": "Force formatting the drive, avoiding all safety checks!"
                  },
                  "allow_format_non_wekafs_drives": {
                    "type": "boolean",
                    "description": "Allow reuse of drives formatted by another versions"
                  }
                },
                "required": [
                  "host_id",
                  "device_path"
                ]
              }
            }
          }
        }
      }
    },
    "/drives/{uid}": {
      "get": {
        "tags": [
          "Drive"
        ],
        "summary": "Get single drive",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Drive uid"
          }
        ],
        "operationId": "getSingleDrive",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Drive"
        ],
        "summary": "Remove drive",
        "operationId": "deleteDrive",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Drive uid"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/drives/activate": {
      "post": {
        "tags": [
          "Drive"
        ],
        "summary": "Activate drives",
        "operationId": "activateDrives",
        "responses": {
          "200": {
            "description": ""
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "drive_uids": {
                    "type": "array",
                    "description": "A list of drive or UUIDs to activate. If no UID is supplied, all inactive drives will be activated",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/drives/deactivate": {
      "post": {
        "tags": [
          "Drive"
        ],
        "summary": "Deactivate drives",
        "operationId": "deactivatesDrives",
        "responses": {
          "200": {
            "description": ""
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "drive_uids": {
                    "type": "array",
                    "description": "A list of drive UIDs to deactivate",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/events": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Get events",
        "operationId": "getEvents",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "num_results",
            "schema": {
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "start_time",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "end_time",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "severity",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "type_list",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "category_list",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "sort_order",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "dsc"
              ]
            }
          },
          {
            "in": "query",
            "name": "next_token",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/events/describe": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Get events description",
        "operationId": "getEventsDescription",
        "responses": {
          "200": {
            "description": ""
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "list of categories"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "list of categories"
          },
          {
            "in": "query",
            "name": "show_internal",
            "schema": {
              "type": "boolean"
            }
          }
        ]
      }
    },
    "/failureDomains": {
      "get": {
        "tags": [
          "Failure domains"
        ],
        "summary": "Get failure domains",
        "operationId": "getFailureDomains",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "show_removed",
            "schema": {
              "type": "boolean"
            }
          }
        ]
      }
    },
    "/failureDomains/{uid}": {
      "get": {
        "tags": [
          "Failure domains"
        ],
        "summary": "Get single failure domain",
        "operationId": "getSingleFailureDomain",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Domain uid"
          }
        ]
      }
    },
    "/fileSystems": {
      "get": {
        "tags": [
          "File system"
        ],
        "summary": "Get all file systems",
        "operationId": "getFileSystems",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "File system"
        ],
        "summary": "Create file system",
        "operationId": "createFileSystem",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/fileSystem"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "group_name",
                  "total_capacity"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Filesystem name",
                    "example": "fs1"
                  },
                  "group_name": {
                    "type": "string",
                    "example": "default",
                    "description": "Group name"
                  },
                  "total_capacity": {
                    "type": "number",
                    "example": 1073741824,
                    "description": "Total capacity (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)"
                  },
                  "obs_name": {
                    "type": "string",
                    "example": "OBS_1",
                    "description": "Object store name. Mandatory for tiered filesystems"
                  },
                  "max_files": {
                    "type": "number",
                    "example": 1,
                    "description": "Max files"
                  },
                  "ssd_capacity": {
                    "type": "number",
                    "example": 1073741824,
                    "description": "SSD capacity (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)"
                  },
                  "encrypted": {
                    "type": "boolean",
                    "example": true,
                    "description": "Creates an encrypted filesystem"
                  },
                  "auth_required": {
                    "type": "boolean",
                    "example": true,
                    "description": "Require the mounting user to be authenticated for mounting this filesystem. This flag is only effective in the root organization, users in non-root organizations must be authenticated to perform a mount operation"
                  },
                  "allow_no_kms": {
                    "type": "boolean",
                    "example": true,
                    "description": "Allow (insecurely) creating an encrypted filesystem without a KMS configured"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/fileSystems/{uid}": {
      "get": {
        "tags": [
          "File system"
        ],
        "summary": "Get file system",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "file system uid"
          }
        ],
        "operationId": "getFileSystem",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "File system"
        ],
        "summary": "Update file system",
        "operationId": "updateFileSystem",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "File system uid"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "new_name": {
                    "type": "string",
                    "description": "New name"
                  },
                  "max_files": {
                    "type": "number",
                    "description": "Max files"
                  },
                  "total_capacity": {
                    "type": "number",
                    "description": "Total capacity (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)"
                  },
                  "ssd_capacity": {
                    "type": "number",
                    "description": "SSD capacity (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)"
                  },
                  "auth_required": {
                    "type": "boolean",
                    "description": "Require the mounting user to be authenticated for mounting this filesystem. This flag is only effective in the root organization, users in non-root organizations must be authenticated to perform a mount operation"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "File system"
        ],
        "summary": "Delete file system",
        "operationId": "deleteFileSystem",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "File system uid"
          }
        ]
      }
    },
    "/fileSystems/{uid}/objectStores": {
      "post": {
        "tags": [
          "File system"
        ],
        "summary": "Attach object store to file system",
        "operationId": "attachObsToFs",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "File system uid"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "obs_name"
                ],
                "type": "object",
                "properties": {
                  "obs_name": {
                    "type": "string",
                    "description": "Name of the Object Store to attach"
                  },
                  "obs_mode": {
                    "type": "string",
                    "description": "The operation mode for the OBS",
                    "enum": [
                      "READ_ONLY",
                      "WRITABLE"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/fileSystems/{uid}/objectStores/{obs_uid}": {
      "delete": {
        "tags": [
          "File system"
        ],
        "summary": "Detach object store from file system",
        "operationId": "detachObsFromFS",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "file system uid"
          },
          {
            "in": "path",
            "name": "obs_uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "object store system uid"
          }
        ]
      },
      "put": {
        "tags": [
          "File system"
        ],
        "summary": "Set attached object store mode",
        "operationId": "setObsMode",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "File system uid"
          },
          {
            "in": "path",
            "name": "obs_uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "object store system uid"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "obs_mode"
                ],
                "type": "object",
                "properties": {
                  "obs_mode": {
                    "type": "string",
                    "description": "The operation mode for the OBS",
                    "enum": [
                      "READ_ONLY",
                      "WRITABLE"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/fileSystems/{uid}/download": {
      "post": {
        "tags": [
          "File system"
        ],
        "summary": "Download file system from object store",
        "operationId": "downloadFS",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "File system uid"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "group_name",
                  "total_capacity",
                  "object_storage",
                  "locator",
                  "ssd_capacity"
                ],
                "type": "object",
                "properties": {
                  "group_name": {
                    "type": "string",
                    "description": "Group name"
                  },
                  "total_capacity": {
                    "type": "number",
                    "description": "Total capacity (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)"
                  },
                  "object_storage": {
                    "type": "string",
                    "description": "Object Store name"
                  },
                  "locator": {
                    "type": "string",
                    "description": "Locator"
                  },
                  "ssd_capacity": {
                    "type": "number",
                    "description": "SSD capacity (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)"
                  },
                  "max_files": {
                    "type": "number",
                    "description": "Max files"
                  },
                  "auth_required": {
                    "type": "boolean",
                    "description": "Require the mounting user to be authenticated for mounting this filesystem. This flag is only effective in the root organization, users in non-root organizations must be authenticated to perform a mount operation"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/hosts": {
      "get": {
        "tags": [
          "Hosts"
        ],
        "summary": "Get all hosts",
        "operationId": "getHosts",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Hosts"
        ],
        "summary": "Add host to cluster",
        "operationId": "addHost",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "hostname"
                ],
                "type": "object",
                "properties": {
                  "hostname": {
                    "type": "string",
                    "description": "Management network hostname"
                  },
                  "ip": {
                    "type": "string",
                    "description": "Management IP; If empty, the hostname is resolved; If host is highly-available or mixed-networking, use IP set '<ip>+<ip>+...+<ip>'"
                  },
                  "no_wait": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/hosts/{uid}": {
      "get": {
        "tags": [
          "Hosts"
        ],
        "summary": "Get single host",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Host uid"
          }
        ],
        "operationId": "getSingleHost",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Hosts"
        ],
        "summary": "Configure host",
        "operationId": "updateHost",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "description": "Host uid",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "failure_domain_type": {
                    "type": "string",
                    "description": "A failure domain type",
                    "enum": [
                      "AUTO",
                      "USER",
                      "HA"
                    ]
                  },
                  "failure_domain": {
                    "type": "string",
                    "description": "Set the host failure domain"
                  },
                  "cores": {
                    "type": "number",
                    "description": "Dedicate host's cores to weka"
                  },
                  "frontend_dedicated_cores": {
                    "type": "number",
                    "description": "Frontend dedicate cores"
                  },
                  "drives_dedicated_cores": {
                    "type": "number",
                    "description": "Drives dedicate cores"
                  },
                  "cores_ids_type": {
                    "type": "string",
                    "description": "A core id type",
                    "enum": [
                      "AUTO",
                      "USER"
                    ]
                  },
                  "cores_ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "memory": {
                    "type": "number",
                    "description": "Dedicate a set amount of RAM to weka"
                  },
                  "dedicated": {
                    "type": "boolean",
                    "description": "Set the host as dedicated to weka. For example it can be rebooted whenever needed, and configured by weka for optimal performance and stability"
                  },
                  "bandwidth": {
                    "type": "number",
                    "description": "Limit weka's bandwidth for the host"
                  },
                  "auto_remove_timeout": {
                    "type": "number",
                    "description": "Set how long to wait before removing this host if it disconnects from the cluster (for clients only)"
                  },
                  "management_ips": {
                    "type": "array",
                    "description": "Set the host's management node IPs. Setting 2 IPs will turn this hosts networking into highly-available mode",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Hosts"
        ],
        "summary": "Remove host from cluster",
        "operationId": "removeHost",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Host uid"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/hosts/apply": {
      "post": {
        "tags": [
          "Hosts"
        ],
        "summary": "Apply hosts",
        "operationId": "applyHosts",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "host_uids"
                ],
                "properties": {
                  "host_uids": {
                    "type": "array",
                    "description": "Host uids to apply",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/hosts/{uid}/apply": {
      "post": {
        "tags": [
          "Hosts"
        ],
        "summary": "Apply host",
        "operationId": "applyHost",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "description": "Host uid",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/hosts/lastFailureReason/{uid}": {
      "delete": {
        "tags": [
          "Hosts"
        ],
        "summary": "Clear host last failure",
        "operationId": "clearHostFailure",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "description": "Host uid",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/hosts/{uid}/resources": {
      "get": {
        "tags": [
          "Hosts"
        ],
        "summary": "Get host resources",
        "operationId": "getHostResources",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "description": "Host uid",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "description": "resource type can be Staging or Stable (Staging if empty)"
          }
        ]
      }
    },
    "/hosts/activate": {
      "post": {
        "tags": [
          "Hosts"
        ],
        "summary": "Activate hosts",
        "operationId": "activateHosts",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "host_uids"
                ],
                "properties": {
                  "host_uids": {
                    "type": "array",
                    "description": "Host uids to activate",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/hosts/{uid}/activate": {
      "post": {
        "tags": [
          "Hosts"
        ],
        "summary": "Activate host",
        "operationId": "activateHost",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "description": "Host uid",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/hosts/deactivate": {
      "post": {
        "tags": [
          "Hosts"
        ],
        "summary": "Deactivate hosts",
        "operationId": "deactivateHosts",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "host_uids"
                ],
                "type": "object",
                "properties": {
                  "host_uids": {
                    "type": "array",
                    "description": "Host uids to deactivate",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/hosts/{uid}/deactivate": {
      "post": {
        "tags": [
          "Hosts"
        ],
        "summary": "Deactivate host",
        "operationId": "deactivateHost",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "description": "Host uid",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/hosts/netdevs": {
      "get": {
        "tags": [
          "Hosts"
        ],
        "summary": "Get all hosts network",
        "operationId": "getAllHostsNetwork",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/hosts/{uid}/netdevs": {
      "get": {
        "tags": [
          "Hosts"
        ],
        "summary": "Get host network",
        "operationId": "getHostNetwork",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "description": "Host uid",
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "post": {
        "tags": [
          "Hosts"
        ],
        "summary": "Create host network",
        "operationId": "createHostNetwork",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "description": "Host uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "device": {
                    "type": "string",
                    "description": "Network device pci-slot/mac-address/interface-name(s)"
                  },
                  "bond_devices": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "ips_type": {
                    "type": "string",
                    "description": "POOL - IPs from the default data networking IP pool would be used, USER - configured by the user",
                    "enum": [
                      "POOL",
                      "USER"
                    ]
                  },
                  "ips": {
                    "type": "array",
                    "description": "IPs to be allocated to cores using the device. If not given - IPs may be set automatically according the interface's IPs, or taken from the default networking IPs pool (format - A.B.C.D-E.F.G.H or A.B.C.D-F.G.H or A.B.C.D-G.H or A.B.C.D-H)",
                    "items": {
                      "type": "string"
                    }
                  },
                  "gateway": {
                    "type": "string",
                    "description": "Default gateway IP. In AWS this value is auto-detected, otherwise the default data networking gateway will be used"
                  },
                  "netmask": {
                    "type": "number",
                    "description": "Netmask in bits number. In AWS this value is auto-detected, otherwise the default data networking netmask will be used"
                  },
                  "name": {
                    "type": "string",
                    "description": "If empty, a name will be auto generated"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/hosts/{uid}/netdevs/{netdev_uid}": {
      "delete": {
        "tags": [
          "Hosts"
        ],
        "summary": "Remove host network",
        "operationId": "removeHostNetwork",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "description": "Host uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "netdev_uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "network device uid"
          }
        ]
      }
    },
    "/interfaceGroups": {
      "get": {
        "tags": [
          "Interface group"
        ],
        "summary": "Get interface groups",
        "operationId": "getInterfaceGroups",
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "Interface group"
        ],
        "summary": "Create interface group",
        "operationId": "createInterfaceGroup",
        "responses": {
          "200": {
            "description": ""
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "type"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Interface group name"
                  },
                  "type": {
                    "type": "string",
                    "description": "Group type. cli subnet type can be NFS"
                  },
                  "subnet": {
                    "type": "string",
                    "description": "Subnet mask in the 255.255.0.0 format"
                  },
                  "gateway": {
                    "type": "string",
                    "description": "Gateway ip"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/interfaceGroups/{uid}": {
      "get": {
        "tags": [
          "Interface group"
        ],
        "summary": "Get interface group",
        "operationId": "getInterfaceGroup",
        "responses": {
          "200": {
            "description": ""
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "interface group uid"
          }
        ]
      },
      "delete": {
        "tags": [
          "Interface group"
        ],
        "summary": "delete interface group",
        "operationId": "deleteInterfaceGroup",
        "responses": {
          "200": {
            "description": ""
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "interface group uid"
          }
        ]
      },
      "put": {
        "tags": [
          "Interface group"
        ],
        "summary": "Update interface group",
        "operationId": "updateInterfaceGroup",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "interface group uid"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "subnet": {
                    "type": "string",
                    "description": "Subnet mask in the 255.255.0.0 format"
                  },
                  "gateway": {
                    "type": "string",
                    "description": "Gateway ip"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/interfaceGroups/{uid}/ips": {
      "post": {
        "tags": [
          "Interface group"
        ],
        "summary": "Add ip range to interface group",
        "operationId": "addIpRangeToInterfaceGroup",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Interface group uid"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "ips"
                ],
                "properties": {
                  "ips": {
                    "type": "string",
                    "description": "IP range (format - A.B.C.D-E.F.G.H or A.B.C.D-F.G.H or A.B.C.D-G.H or A.B.C.D-H)"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/interfaceGroups/{uid}/ports/{host_uid}": {
      "post": {
        "tags": [
          "Interface group"
        ],
        "summary": "Add port to interface group",
        "operationId": "addPortToInterfaceGroup",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Interface group uid"
          },
          {
            "in": "path",
            "name": "host_uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Host uid"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "port"
                ],
                "properties": {
                  "port": {
                    "type": "string",
                    "description": "Port's device. (e.g. eth1)"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/interfaceGroups/{uid}/ports/{host_uid}/{port}": {
      "delete": {
        "tags": [
          "Interface group"
        ],
        "summary": "Delete port from interface group",
        "operationId": "deletePortFromInterfaceGroup",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Interface group uid"
          },
          {
            "in": "path",
            "name": "host_uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Host uid"
          },
          {
            "in": "path",
            "name": "port",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Port to delete"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/interfaceGroups/{uid}/ips/{ips}": {
      "delete": {
        "tags": [
          "Interface group"
        ],
        "summary": "Delete ip range from interface group",
        "operationId": "deleteIpRangeFromInterfaceGroup",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "interface group uid"
          },
          {
            "in": "path",
            "name": "ips",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "IP or IP range to delete"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/kms": {
      "get": {
        "tags": [
          "KMS"
        ],
        "summary": "Get kms configuration",
        "operationId": "getKms",
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "KMS"
        ],
        "summary": "Set kms vault configuration (base_url,master_key_name,token) or set kms kmip configuration (server_endpoint, key_uid, client_cert_pem, client_key_pem, ca_cert_pem)\n",
        "operationId": "setKms",
        "responses": {
          "200": {
            "description": ""
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "base_url": {
                    "type": "string"
                  },
                  "master_key_name": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  },
                  "server_endpoint": {
                    "type": "string"
                  },
                  "key_uid": {
                    "type": "string"
                  },
                  "client_cert_pem": {
                    "type": "string"
                  },
                  "client_key_pem": {
                    "type": "string"
                  },
                  "ca_cert_pem": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "KMS"
        ],
        "summary": "Delete kms configuration",
        "operationId": "deleteKms",
        "parameters": [
          {
            "in": "query",
            "name": "force_delete",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/kms/type": {
      "get": {
        "tags": [
          "KMS"
        ],
        "summary": "Get kms type",
        "operationId": "getKmsType",
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/kms/rewrap": {
      "post": {
        "tags": [
          "KMS"
        ],
        "summary": "Rewrap KMS key",
        "operationId": "rewrapKmsKey",
        "responses": {
          "200": {
            "description": ""
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "new_key_uid": {
                    "type": "string",
                    "description": "(KMIP-only) Unique identifier for the new key to be used to wrap filesystem keys"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ldap": {
      "get": {
        "tags": [
          "LDAP"
        ],
        "summary": "Get LDAP configuration",
        "operationId": "getLdap",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "LDAP"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean"
                  },
                  "server_uri": {
                    "type": "string",
                    "description": "LDAP server URI ([ldap://]hostname[:port] or ldaps://hostname[:port])"
                  },
                  "start_tls": {
                    "type": "boolean",
                    "description": "Issue StartTLS after connecting (should not be used with ldaps://)"
                  },
                  "ignore_start_tls_failure": {
                    "type": "boolean",
                    "description": "Ignore start TLS failure"
                  },
                  "server_timeout_secs": {
                    "type": "number",
                    "description": "LDAP connection timeout in seconds"
                  },
                  "protocol_version": {
                    "type": "number",
                    "description": "LDAP protocol version"
                  },
                  "base_dn": {
                    "type": "string",
                    "description": "Base DN"
                  },
                  "user_object_class": {
                    "type": "string",
                    "description": "User object class"
                  },
                  "user_id_attribute": {
                    "type": "string",
                    "description": "User ID attribute"
                  },
                  "user_revocation_attribute": {
                    "type": "string",
                    "description": "User revocation attribute - If provided, updating this attribute in the LDAP server automatically revokes all user tokens"
                  },
                  "group_object_class": {
                    "type": "string",
                    "description": "Group object class"
                  },
                  "group_membership_attribute": {
                    "type": "string",
                    "description": "Group membership attribute"
                  },
                  "group_id_attribute": {
                    "type": "string",
                    "description": "Group ID attribute"
                  },
                  "reader_username": {
                    "type": "string",
                    "description": "Reader username"
                  },
                  "reader_password": {
                    "type": "string",
                    "description": "Reader password"
                  },
                  "role_groups": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "ClusterAdmin",
                        "OrgAdmin",
                        "ReadOnly",
                        "Regular"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Update LDAP configuration",
        "operationId": "updateLdap",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "LDAP"
        ],
        "summary": "Reset LDAP configuration",
        "operationId": "deleteLdap",
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/license": {
      "post": {
        "tags": [
          "License"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "license": {
                    "type": "string",
                    "description": "The new license to set to the system"
                  },
                  "plan_id": {
                    "type": "string"
                  },
                  "secret_key": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "summary": "Set license",
        "operationId": "setLicense",
        "description": "Classic license (license) or PAYG license (plan_id,secret_key,[url])",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "License"
        ],
        "summary": "Reset license",
        "operationId": "resetLicense",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "summary": "login to system",
        "operationId": "login",
        "tags": [
          "Login"
        ],
        "description": "",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "username",
                  "password"
                ],
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "User's username"
                  },
                  "password": {
                    "type": "string",
                    "description": "User's password"
                  },
                  "org": {
                    "type": "string",
                    "description": "Organization name, default 'Root'"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/login/refresh": {
      "post": {
        "summary": "get authentication tokens using refresh token",
        "operationId": "refreshToken",
        "tags": [
          "Login"
        ],
        "description": "",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "refresh_token"
                ],
                "properties": {
                  "refresh_token": {
                    "type": "string",
                    "description": "Refresh token"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nfs/permissions": {
      "get": {
        "tags": [
          "NFS"
        ],
        "summary": "Get NFS permissions",
        "operationId": "getNfsPermissions",
        "responses": {
          "200": {
            "description": ""
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "filesystem",
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "post": {
        "tags": [
          "NFS"
        ],
        "summary": "Add NFS permission",
        "operationId": "addNfsPermission",
        "responses": {
          "200": {
            "description": ""
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "filesystem",
                  "group"
                ],
                "properties": {
                  "filesystem": {
                    "type": "string",
                    "description": "File system name"
                  },
                  "group": {
                    "type": "string",
                    "description": "Client group name"
                  },
                  "path": {
                    "type": "string",
                    "description": "path [default -  /]"
                  },
                  "permission_type": {
                    "type": "string",
                    "description": "Permission type",
                    "enum": [
                      "RO",
                      "RW"
                    ]
                  },
                  "root_squashing": {
                    "type": "boolean",
                    "description": "Root squashing"
                  },
                  "anon_uid": {
                    "type": "number",
                    "description": "Anonymous UID to be used instead of root when root squashing is enabled"
                  },
                  "anon_gid": {
                    "type": "number",
                    "description": "Anonymous GID to be used instead of root when root squashing is enabled"
                  },
                  "obs_direct": {
                    "type": "boolean",
                    "description": "Obs direct"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nfs/permissions/{uid}": {
      "get": {
        "tags": [
          "NFS"
        ],
        "summary": "Get NFS permission",
        "operationId": "getNfsPermission",
        "responses": {
          "200": {
            "description": ""
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Permission uid"
          }
        ]
      },
      "put": {
        "tags": [
          "NFS"
        ],
        "summary": "Update NFS permission",
        "operationId": "updateNfsPermission",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Permission uid"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "path": {
                    "type": "string",
                    "description": "path [default -  /]"
                  },
                  "permission_type": {
                    "type": "string",
                    "description": "Permission type",
                    "enum": [
                      "RO",
                      "RW"
                    ]
                  },
                  "root_squashing": {
                    "type": "boolean",
                    "description": "Root squashing"
                  },
                  "anon_uid": {
                    "type": "number",
                    "description": "Anonymous UID to be used instead of root when root squashing is enabled"
                  },
                  "anon_gid": {
                    "type": "number",
                    "description": "Anonymous GID to be used instead of root when root squashing is enabled"
                  },
                  "obs_direct": {
                    "type": "boolean",
                    "description": "Obs direct"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "NFS"
        ],
        "summary": "Remove NFS permission",
        "operationId": "deleteNfsPermission",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Permission uid"
          },
          {
            "in": "query",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "description": "Default \"/\""
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/nfs/clientGroups": {
      "get": {
        "tags": [
          "NFS"
        ],
        "summary": "Get all nfs client groups",
        "operationId": "getClientGroups",
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "NFS"
        ],
        "summary": "Create nfs client group",
        "operationId": "createClientGroup",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Group name"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/nfs/clientGroups/{uid}": {
      "get": {
        "tags": [
          "NFS"
        ],
        "summary": "Get nfs client group",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "group uid"
          }
        ],
        "operationId": "getClientGroup",
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "delete": {
        "tags": [
          "NFS"
        ],
        "summary": "Delete nfs client group",
        "operationId": "deleteClientGroup",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "schema": {
              "type": "string"
            },
            "description": "group uid",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/nfs/clientGroups/{uid}/rules": {
      "post": {
        "tags": [
          "NFS"
        ],
        "summary": "create rule for nfs client group",
        "operationId": "addClientGroupRule",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "schema": {
              "type": "string"
            },
            "description": "group uid",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "dns": {
                    "type": "string",
                    "description": "DNS rule with *?[] wildcards rule"
                  },
                  "ip": {
                    "type": "string",
                    "description": "IP with netmask rule, in the 1.1.1.1/255.255.0.0 format"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/nfs/clientGroups/{uid}/rules/{rule_uid}": {
      "delete": {
        "tags": [
          "NFS"
        ],
        "summary": "Delete rule for nfs client group",
        "operationId": "deleteClientGroupRule",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "schema": {
              "type": "string"
            },
            "description": "group uid",
            "required": true
          },
          {
            "in": "path",
            "name": "rule_uid",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/nodes": {
      "get": {
        "tags": [
          "Nodes"
        ],
        "summary": "Get all nodes",
        "operationId": "getNodes",
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/nodes/{uid}": {
      "get": {
        "tags": [
          "Nodes"
        ],
        "summary": "Get node",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Node uid"
          }
        ],
        "operationId": "getNode",
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/objectStoreBuckets": {
      "get": {
        "tags": [
          "Object store bucket"
        ],
        "summary": "Get all object store buckets",
        "operationId": "getAllObs",
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "Object store bucket"
        ],
        "summary": "Create object store bucket",
        "operationId": "createObs",
        "responses": {
          "200": {
            "description": ""
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the Object Store"
                  },
                  "protocol": {
                    "type": "string",
                    "description": "One of - HTTP (default), HTTPS, HTTPS_UNVERIFIED",
                    "enum": [
                      "HTTP",
                      "HTTPS",
                      "HTTPS_UNVERIFIED"
                    ]
                  },
                  "hostname": {
                    "type": "string",
                    "description": "Hostname (or IP) of the entrypoint to the object store"
                  },
                  "port": {
                    "type": "number",
                    "description": "Port of the entrypoint to S3 (single Accesser or Load-Balancer)"
                  },
                  "bucket": {
                    "type": "string",
                    "description": "Name of the bucket we are assigned to work with"
                  },
                  "auth_method": {
                    "type": "string",
                    "description": "Authentication method S3AuthMethod can be None, AWSSignature2 or AWSSignature4",
                    "enum": [
                      "None",
                      "AWSSignature2",
                      "AWSSignature4"
                    ]
                  },
                  "region": {
                    "type": "string",
                    "description": "Name of the region we are assigned to work with (usually empty)"
                  },
                  "access_key_id": {
                    "type": "string",
                    "description": "Access Key ID for AWS Signature authentications"
                  },
                  "secret_key": {
                    "type": "string",
                    "description": "Secret Key for AWS Signature authentications"
                  },
                  "dry_run": {
                    "type": "boolean",
                    "description": "Only test the command, don't affect the system"
                  },
                  "skip_verification": {
                    "type": "boolean",
                    "description": "Don't verify the connection to the given store"
                  },
                  "bandwidth": {
                    "type": "number",
                    "description": "Bandwidth limitation per core (Mbps)"
                  },
                  "verbose_errors": {
                    "type": "boolean",
                    "description": "Dump HTTP info on error"
                  },
                  "errors_timeout": {
                    "type": "string",
                    "description": "If the OBS link is down for longer than this, all IOs that need data return with an error (format - duration between 1 minute and 15 minutes)"
                  },
                  "prefetch_mib": {
                    "type": "number",
                    "description": "How many MiB of data to prefetch when reading a whole MiB on object store (format - 0..600)"
                  },
                  "max_concurrent_downloads": {
                    "type": "number",
                    "description": "Maximum number of downloads we concurrently perform on this object store in a single IO node (format - 1..64)"
                  },
                  "max_concurrent_uploads": {
                    "type": "number",
                    "description": "Maximum number of uploads we concurrently perform on this object store in a single IO node (format - 1..64)"
                  },
                  "max_concurrent_removals": {
                    "type": "number",
                    "description": "Maximum number of removals we concurrently perform on this object store in a single IO node (format -  1..64)"
                  },
                  "max_extents_in_data_blob": {
                    "type": "number",
                    "description": "Maximum number of extents data to upload to an object store data blob"
                  },
                  "max_blocks_in_data_blob": {
                    "type": "number",
                    "description": "Maximum size to upload to an object store data blob (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/objectStoreBuckets/{uid}": {
      "get": {
        "tags": [
          "Object store bucket"
        ],
        "summary": "Get object store bucket",
        "operationId": "getObs",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "object storage uid"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "delete": {
        "tags": [
          "Object store bucket"
        ],
        "summary": "Delete object store bucket",
        "operationId": "deleteObs",
        "responses": {
          "200": {
            "description": ""
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "object storage uid"
          }
        ]
      },
      "put": {
        "tags": [
          "Object store bucket"
        ],
        "summary": "Update object store bucket",
        "operationId": "updateObs",
        "responses": {
          "200": {
            "description": ""
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "object storage uid"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "new_name": {
                    "type": "string",
                    "description": "New name of the object store"
                  },
                  "protocol": {
                    "type": "string",
                    "description": "One of - HTTP (default), HTTPS, HTTPS_UNVERIFIED",
                    "enum": [
                      "HTTP",
                      "HTTPS",
                      "HTTPS_UNVERIFIED"
                    ]
                  },
                  "hostname": {
                    "type": "string",
                    "description": "Hostname (or IP) of the entrypoint to the object store"
                  },
                  "port": {
                    "type": "number",
                    "description": "Port of the entrypoint to S3 (single Accesser or Load-Balancer)"
                  },
                  "bucket": {
                    "type": "string",
                    "description": "Name of the bucket we are assigned to work with"
                  },
                  "auth_method": {
                    "type": "string",
                    "description": "Authentication method S3AuthMethod can be None, AWSSignature2 or AWSSignature4",
                    "enum": [
                      "None",
                      "AWSSignature2",
                      "AWSSignature4"
                    ]
                  },
                  "region": {
                    "type": "string",
                    "description": "Name of the region we are assigned to work with (usually empty)"
                  },
                  "access_key_id": {
                    "type": "string",
                    "description": "Access Key ID for AWS Signature authentications"
                  },
                  "secret_key": {
                    "type": "string",
                    "description": "Secret Key for AWS Signature authentications"
                  },
                  "dry_run": {
                    "type": "boolean",
                    "description": "Only test the command, don't affect the system"
                  },
                  "skip_verification": {
                    "type": "boolean",
                    "description": "Don't verify the connection to the given store"
                  },
                  "bandwidth": {
                    "type": "number",
                    "description": "Bandwidth limitation per core (Mbps)"
                  },
                  "verbose_errors": {
                    "type": "boolean",
                    "description": "Dump HTTP info on error"
                  },
                  "errors_timeout": {
                    "type": "string",
                    "description": "If the OBS link is down for longer than this, all IOs that need data return with an error (format - duration between 1 minute and 15 minutes)"
                  },
                  "prefetch_mib": {
                    "type": "number",
                    "description": "How many MiB of data to prefetch when reading a whole MiB on object store (format - 0..600)"
                  },
                  "max_concurrent_downloads": {
                    "type": "number",
                    "description": "Maximum number of downloads we concurrently perform on this object store in a single IO node (format - 1..64)"
                  },
                  "max_concurrent_uploads": {
                    "type": "number",
                    "description": "Maximum number of uploads we concurrently perform on this object store in a single IO node (format - 1..64)"
                  },
                  "max_concurrent_removals": {
                    "type": "number",
                    "description": "Maximum number of removals we concurrently perform on this object store in a single IO node (format -  1..64)"
                  },
                  "max_extents_in_data_blob": {
                    "type": "number",
                    "description": "Maximum number of extents data to upload to an object store data blob"
                  },
                  "max_blocks_in_data_blob": {
                    "type": "number",
                    "description": "Maximum size to upload to an object store data blob (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/objectStoreBuckets/{uid}/operations": {
      "get": {
        "tags": [
          "Object store bucket"
        ],
        "summary": "Get object store bucket operations",
        "operationId": "getObsOperations",
        "responses": {
          "200": {
            "description": ""
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "object storage uid"
          }
        ]
      }
    },
    "/objectStoreBuckets/pathStatus/{path}": {
      "get": {
        "tags": [
          "Object store bucket"
        ],
        "summary": "Get object store bucket path status",
        "operationId": "getObsPathStatus",
        "responses": {
          "200": {
            "description": ""
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/organizations/multipleOrgsExist": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get if multiple Organizations Exist",
        "operationId": "getMultipleOrgExist",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/organizations": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get all organizations",
        "operationId": "getOrganizations",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Create organization",
        "operationId": "createOrganization",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "username",
                  "password"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Organization name"
                  },
                  "username": {
                    "type": "string",
                    "description": "Username of organization admin"
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of organization admin"
                  },
                  "ssd_quota": {
                    "type": "number",
                    "description": "SSD quota (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)"
                  },
                  "total_quota": {
                    "type": "number",
                    "description": "Total quota (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{uid}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get organization",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "organization uid"
          }
        ],
        "operationId": "getOrganization",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Organization"
        ],
        "summary": "Delete organization",
        "operationId": "deleteOrganization",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "organization uid"
          }
        ]
      },
      "put": {
        "tags": [
          "Organization"
        ],
        "summary": "update organization",
        "operationId": "updateOrganization",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "organization uid"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "new_name": {
                    "type": "string",
                    "description": "Organization new name"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{uid}/limits": {
      "put": {
        "tags": [
          "Organization"
        ],
        "summary": "Set organization capacity limits",
        "operationId": "setOrganizationLimit",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "organization uid"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ssd_quota": {
                    "type": "number",
                    "description": "SSD quota (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)"
                  },
                  "total_quota": {
                    "type": "number",
                    "description": "Total quota (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/smb": {
      "get": {
        "tags": [
          "SMB"
        ],
        "summary": "Get smb cluster info",
        "operationId": "getSamba",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "SMB"
        ],
        "summary": "Set smb cluster info",
        "operationId": "setSamba",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "domain"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Domain name"
                  },
                  "samba_hosts": {
                    "type": "array",
                    "description": "The hosts that will serve via the SMB protocol (pass weka's host uid)",
                    "items": {
                      "type": "string"
                    }
                  },
                  "domain": {
                    "type": "string",
                    "description": "The domain to join the SMB cluster to"
                  },
                  "samba_ips": {
                    "type": "array",
                    "description": "IPs used as floating IPs for samba to server SMB in a HA manner. Then should not be assigned to any host on the network (format - A.B.C.D-E.F.G.H or A.B.C.D-F.G.H or A.B.C.D-G.H or A.B.C.D-H)",
                    "items": {
                      "type": "string"
                    }
                  },
                  "domain_netbios_name": {
                    "type": "string",
                    "description": "The domain netbios name; If not given, the default will be the first part of the given domain name"
                  },
                  "idmap_backend": {
                    "type": "string",
                    "description": "The samba domain backend type (rid, rfc2307, etc.). Note that rfc2307 requires uid/gid configuration on the Active Directory and is persistent, while rid does not require any Active Directory configuration but in case of range changes"
                  },
                  "smb_conf_extra": {
                    "type": "string"
                  },
                  "default_domain_mapping_from_id": {
                    "type": "number",
                    "description": "The samba default domain first id"
                  },
                  "default_domain_mapping_to_id": {
                    "type": "number",
                    "description": "The samba default domain last id"
                  },
                  "joined_domain_mapping_from_id": {
                    "type": "number",
                    "description": "The joined domain first id"
                  },
                  "joined_domain_mapping_to_id": {
                    "type": "number",
                    "description": "The joined domain last id"
                  },
                  "encryption": {
                    "type": "string",
                    "description": "Samba cluster encryption",
                    "enum": [
                      "enabled",
                      "disabled",
                      "desired",
                      "required"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "SMB"
        ],
        "summary": "Update smb cluster info",
        "operationId": "updateSamba",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "encryption": {
                    "type": "string",
                    "description": "Samba cluster encryption",
                    "enum": [
                      "enabled",
                      "disabled",
                      "desired",
                      "required"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SMB"
        ],
        "summary": "Clear smb cluster info",
        "operationId": "clearSamba",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/smb/domains": {
      "get": {
        "tags": [
          "SMB"
        ],
        "summary": "Get smb trusted domains",
        "operationId": "setSambaDomains",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "SMB"
        ],
        "summary": "Add trusted domain to smb",
        "operationId": "addSambaDomain",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "domain_name",
                  "mapping_from_id",
                  "mapping_to_id"
                ],
                "properties": {
                  "domain_name": {
                    "type": "string",
                    "description": "The name of the domain being added"
                  },
                  "mapping_from_id": {
                    "type": "number",
                    "description": "The first id"
                  },
                  "mapping_to_id": {
                    "type": "number",
                    "description": "The last id"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/smb/mount": {
      "get": {
        "tags": [
          "SMB"
        ],
        "summary": "Get smb mount options",
        "operationId": "setSambaMountOptions",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/smb/shares": {
      "get": {
        "tags": [
          "SMB"
        ],
        "summary": "Get smb shares",
        "operationId": "setSambaShares",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "SMB"
        ],
        "summary": "add share to smb",
        "operationId": "addShareToSamba",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "share_name",
                  "fs_name"
                ],
                "properties": {
                  "share_name": {
                    "type": "string",
                    "description": "The name of the share being added"
                  },
                  "fs_name": {
                    "type": "string",
                    "description": "Filesystem name to share"
                  },
                  "description": {
                    "type": "string",
                    "description": "A description for samba to show regarding the share"
                  },
                  "sub_path": {
                    "type": "string",
                    "description": "The path inside the filesystem to share"
                  },
                  "mount_options": {
                    "type": "string",
                    "description": "Option to pass to the mount command when mounting weka. NOTE - This parameter is DANGEROUS, use with caution. Incorrect usage may lead to DATA LOSS"
                  },
                  "file_create_mask": {
                    "type": "string",
                    "description": "POSIX mode mask files will be created with. E.g. \"0744\""
                  },
                  "directory_create_mask": {
                    "type": "string",
                    "description": "POSIX mode mask directories will be created with. E.g. \"0755\""
                  },
                  "acl": {
                    "type": "boolean",
                    "description": "Enable Windows ACLs on the share. Will also be translated (as possible) to POSIX ACL"
                  },
                  "obs_direct": {
                    "type": "boolean",
                    "description": "Mount samba in obs-direct mode"
                  },
                  "encryption": {
                    "type": "string",
                    "description": "Samba share encryption",
                    "enum": [
                      "cluster_default",
                      "desired",
                      "required"
                    ]
                  },
                  "read_only": {
                    "type": "boolean",
                    "description": "Mount samba as read-only"
                  },
                  "user_list_type": {
                    "type": "string"
                  },
                  "users": {
                    "type": "array",
                    "description": "The list type to which users are added to",
                    "enum": [
                      "read_only",
                      "read_write",
                      "valid",
                      "invalid"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "additional_share_options": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/smb/activeDirectory": {
      "post": {
        "tags": [
          "SMB"
        ],
        "summary": "Join smb active directory",
        "operationId": "setSambaActiveDirectory",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "username",
                  "password"
                ],
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "The name of the administrator user to join the domain using it"
                  },
                  "password": {
                    "type": "string",
                    "description": "The administrator user password"
                  },
                  "debug_mode": {
                    "type": "boolean",
                    "description": "Run the command in debug mode"
                  },
                  "server": {
                    "type": "string",
                    "description": "The domain controller server"
                  },
                  "create_computerOU": {
                    "type": "string",
                    "description": "Precreate the computer account in a specific OU"
                  },
                  "extra_options": {
                    "type": "string"
                  },
                  "task_id": {
                    "type": "string"
                  },
                  "asynchronous": {
                    "type": "boolean"
                  },
                  "poll": {
                    "type": "boolean"
                  },
                  "timeout": {
                    "type": "string",
                    "description": "Join command timeout in seconds (format - 3s, 2h, 4m, 1d, 1d5h, 1w, infinite/unlimited)"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "SMB"
        ],
        "summary": "Leave smb active directory",
        "operationId": "deleteSambaActiveDirectory",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "The name of the administrator user to join the domain using it"
                  },
                  "password": {
                    "type": "string",
                    "description": "The administrator user password"
                  },
                  "debug_mode": {
                    "type": "boolean",
                    "description": "Run the command in debug mode"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/smb/debug": {
      "post": {
        "tags": [
          "SMB"
        ],
        "summary": "Set smb debug level",
        "operationId": "setSambaDebug",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "debug_level"
                ],
                "properties": {
                  "debug_level": {
                    "type": "number",
                    "description": "The debug level (format - 0..10)"
                  },
                  "samba_hosts": {
                    "type": "array",
                    "description": "Hosts to set debug level (pass host uid). All hosts as default",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/smb/shares/{uid}": {
      "put": {
        "tags": [
          "SMB"
        ],
        "summary": "Update smb share",
        "operationId": "updateSambaShare",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "share uid"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "encryption"
                ],
                "properties": {
                  "encryption": {
                    "type": "string",
                    "description": "Samba share encryption",
                    "enum": [
                      "cluster_default",
                      "desired",
                      "required"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SMB"
        ],
        "summary": "Delete smb share",
        "operationId": "deleteSambaShare",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Share uid"
          }
        ]
      }
    },
    "/smb/domains/{uid}": {
      "delete": {
        "tags": [
          "SMB"
        ],
        "summary": "Delete smb domain",
        "operationId": "deleteSambaDomain",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "description": "Domain uid",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/smb/users/{share_uid}/{user_type}": {
      "post": {
        "tags": [
          "SMB"
        ],
        "summary": "Add user to smb",
        "operationId": "addUserToSamba",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "share_uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Share uid"
          },
          {
            "in": "path",
            "name": "user_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "read_only, read_write, valid, invalid"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "users": {
                    "type": "array",
                    "description": "Users to add",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/smb/users/reset/{share_uid}/{user_type}": {
      "delete": {
        "tags": [
          "SMB"
        ],
        "summary": "Reset smb users",
        "operationId": "resetSambaUsers",
        "responses": {
          "200": {
            "description": ""
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "share_uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Share uid"
          },
          {
            "in": "path",
            "name": "user_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "read_only, read_write, valid, invalid"
          }
        ]
      }
    },
    "/smb/users/{share_uid}/{user_type}/{user}": {
      "delete": {
        "tags": [
          "SMB"
        ],
        "summary": "Delete smb user",
        "operationId": "deleteSambaUser",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "share_uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Share uid"
          },
          {
            "in": "path",
            "name": "user_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "read_only, read_write, valid, invalid"
          },
          {
            "in": "path",
            "name": "user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/security/ui": {
      "get": {
        "tags": [
          "Security"
        ],
        "summary": "Get ui server status",
        "operationId": "getUiServerStatus",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Security"
        ],
        "summary": "Enable ui server",
        "operationId": "enableUiServer",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "clients_enabled": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Security"
        ],
        "summary": "Disable ui server",
        "operationId": "disableUiServer",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/security/tokensExpiry": {
      "get": {
        "tags": [
          "Security"
        ],
        "summary": "Get tokens default expiry time",
        "operationId": "getTokensExpiry",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/snapshots": {
      "get": {
        "tags": [
          "Snapshots"
        ],
        "summary": "Get snapshots",
        "operationId": "getSnapshots",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/snapshots/{uid}": {
      "get": {
        "tags": [
          "Snapshots"
        ],
        "summary": "Get snapshot",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Snapshot uid"
          }
        ],
        "operationId": "getSnapshot",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Snapshots"
        ],
        "summary": "Update snapshot",
        "operationId": "updateSnapshot",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "snapshot uid"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "new_name": {
                    "type": "string"
                  },
                  "access_point": {
                    "type": "string"
                  },
                  "is_writable": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Snapshots"
        ],
        "summary": "Delete snapshot",
        "operationId": "deleteSnapshot",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Snapshot uid"
          }
        ]
      }
    },
    "/snapshots/{fs_uid}": {
      "post": {
        "tags": [
          "Snapshots"
        ],
        "summary": "Create snapshot",
        "operationId": "createSnapshot",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "fs_uid",
            "required": true,
            "description": "File system uid",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "access_point"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Target Snapshot name"
                  },
                  "access_point": {
                    "type": "string",
                    "description": "Access point"
                  },
                  "source_snap": {
                    "type": "string",
                    "description": "Source snapshot"
                  },
                  "is_writable": {
                    "type": "boolean",
                    "description": "Writable"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/snapshots/{fs_uid}/{uid}/abortUpload": {
      "post": {
        "tags": [
          "Snapshots"
        ],
        "summary": "Abort snapshot upload",
        "operationId": "abortSnapshotUpload",
        "responses": {
          "200": {
            "description": ""
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "fs_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "snapshot uid"
          }
        ]
      }
    },
    "/snapshots/{fs_uid}/{uid}/copy": {
      "post": {
        "tags": [
          "Snapshots"
        ],
        "summary": "Copy snapshot",
        "operationId": "copySnapshot",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "fs_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "uid",
            "description": "Snapshot uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "destination_name": {
                    "type": "string",
                    "description": "Destination snapshot name"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/snapshots/{fs_uid}/{uid}/download": {
      "post": {
        "tags": [
          "Snapshots"
        ],
        "summary": "Download snapshot",
        "operationId": "downloadSnapshot",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "fs_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "snapshot uid"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "access_point": {
                    "type": "string",
                    "description": "Snapshot access point"
                  },
                  "locator": {
                    "type": "string",
                    "description": "locator"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/snapshots/{fs_uid}/{uid}/upload": {
      "post": {
        "tags": [
          "Snapshots"
        ],
        "summary": "Upload snapshot",
        "operationId": "uploadSnapshot",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "fs_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "snapshot uid"
          }
        ]
      }
    },
    "/snapshots/{fs_uid}/{uid}/restore": {
      "post": {
        "tags": [
          "Snapshots"
        ],
        "summary": "Restore file system from snapshot",
        "operationId": "restoreFileSystemFromSnapshot",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "fs_uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "snapshot uid"
          }
        ]
      }
    },
    "/stats": {
      "get": {
        "tags": [
          "Stats"
        ],
        "summary": "Get stats",
        "operationId": "getStats",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "start_time",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "end_time",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "interval",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "array of categories"
          },
          {
            "in": "query",
            "name": "stat",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "resolution_secs",
            "schema": {
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "accumulated",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "per_node",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "node_uids",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "param",
            "schema": {
              "type": "object",
              "properties": {
                "<param_key>": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "style": "deepObject",
            "explode": true
          },
          {
            "in": "query",
            "name": "no_zeroes",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "show_internal",
            "schema": {
              "type": "boolean"
            }
          }
        ]
      }
    },
    "/stats/description": {
      "get": {
        "tags": [
          "Stats"
        ],
        "summary": "Get stats description",
        "operationId": "getStatsDescription",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/stats/realtime": {
      "get": {
        "tags": [
          "Stats"
        ],
        "summary": "Get real time stats",
        "operationId": "getRealTimeStats",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "retention_duration",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/stats/retention": {
      "get": {
        "tags": [
          "Stats"
        ],
        "summary": "Get stats retention and estimated disk usage",
        "operationId": "getStatsDiskUsage",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "retention_duration",
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "post": {
        "tags": [
          "Stats"
        ],
        "summary": "Set stats retention",
        "operationId": "getStatsRetention",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "retention_duration": {
                    "type": "string",
                    "description": "Duration (format - 1 minute 2 seconds, options - weeks, days, hours, minutes, seconds)"
                  },
                  "dry_run": {
                    "type": "boolean",
                    "description": "Only test the command, don't affect the system"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/io/start": {
      "post": {
        "tags": [
          "System IO"
        ],
        "summary": "Start system IO",
        "operationId": "startIO",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/io/stop": {
      "post": {
        "tags": [
          "System IO"
        ],
        "summary": "Stop system IO",
        "operationId": "stopIO",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "type": "boolean",
                    "description": "Force this action without further confirmation. This action will disrupt operation of all connected clients"
                  },
                  "brutal_no_flush": {
                    "type": "boolean",
                    "description": "Force stopping IO services immediately without graceful flushing of ongoing operations. Using this flag may cause data-loss if used without explicit guidance from WekaIO customer support"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tasks": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get all cluster tasks",
        "operationId": "getTasks",
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/tasks/{uid}/resume": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Resume task",
        "operationId": "resumeTask",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "description": "Task uid",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/tasks/{uid}/pause": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Pause task",
        "operationId": "pauseTasks",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "description": "Task uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/tasks/limits": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get cluster tasks limit",
        "operationId": "getTasksLimit",
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "put": {
        "tags": [
          "Tasks"
        ],
        "summary": "Set cluster tasks limit",
        "operationId": "setTasksLimit",
        "responses": {
          "200": {
            "description": ""
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cpu_limit": {
                    "type": "number",
                    "description": "Percent of the CPU resources to dedicate to background tasks"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tls": {
      "get": {
        "tags": [
          "TLS"
        ],
        "summary": "Get TLS status",
        "operationId": "getTls",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "TLS"
        ],
        "summary": "Enable TLS",
        "operationId": "enableTls",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "tls_cert_pem",
                  "tls_key_pem"
                ],
                "properties": {
                  "tls_cert_pem": {
                    "type": "string"
                  },
                  "tls_key_pem": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TLS"
        ],
        "summary": "Disable tls",
        "operationId": "disableTls",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "Get all users",
        "operationId": "getUsers",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "User"
        ],
        "description": ""
      },
      "post": {
        "summary": "Create user",
        "operationId": "createUser",
        "tags": [
          "User"
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Username of the new user to create"
                  },
                  "password": {
                    "type": "string",
                    "description": "Password for the new user - must contain at least 8 characters, and have at least one uppercase letter, one lowercase letter, and one number or special character. Typing special characters as arguments to this command might require escaping"
                  },
                  "role": {
                    "type": "string",
                    "description": "The role of the new user",
                    "enum": [
                      "ClusterAdmin",
                      "OrgAdmin",
                      "ReadOnly",
                      "Regular"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/users/{uid}": {
      "put": {
        "summary": "Update user",
        "operationId": "updateUser",
        "tags": [
          "User"
        ],
        "description": "",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "description": "User uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "description": "The role of the new user",
                    "enum": [
                      "ClusterAdmin",
                      "OrgAdmin",
                      "ReadOnly",
                      "Regular"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user",
        "operationId": "deleteUser",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "User"
        ],
        "description": "",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "description": "User uid",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ]
      }
    },
    "/users/password": {
      "put": {
        "summary": "Update user password",
        "operationId": "updateUserPassword",
        "tags": [
          "User"
        ],
        "description": "",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "username",
                  "old_password",
                  "new_password"
                ],
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Username"
                  },
                  "old_password": {
                    "type": "string",
                    "description": "Old password"
                  },
                  "new_password": {
                    "type": "string",
                    "description": "New password"
                  },
                  "org": {
                    "type": "string",
                    "description": "Organization name, default 'Root'"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/whoami": {
      "get": {
        "summary": "Get user info",
        "operationId": "whoAmI",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "User"
        ],
        "description": ""
      }
    },
    "/users/{uid}/revoke": {
      "delete": {
        "summary": "Revoke user tokens",
        "operationId": "revokeUser",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "User"
        ],
        "description": "",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "description": "User uid",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ]
      }
    }
  },
  "tags": []
}